// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UseCase {
  SIGNUP
  DOWNLOAD
}

model Session {
  id       Int             @id @default(autoincrement())
  session  String          @unique
  valid    DateTime
  created  DateTime        @default(now())
  updated  DateTime        @updatedAt
  userId   String
  identity UserIdentifier?
  user     User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Auth {
  id      Int      @id @default(autoincrement())
  authKey String   @unique
  access  Int
  created DateTime @default(now())
  useCase UseCase  @default(SIGNUP)
  updated DateTime @updatedAt
  userId  String
  auth    String?
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  view    View?    @relation(fields: [auth], references: [auth], onDelete: Cascade)
}

model UserIdentifier {
  id          Int      @id @default(autoincrement())
  browserName String
  osName      String
  country     String
  regionName  String
  city        String
  address     String
  userId      String
  sessionId   String   @unique
  created     DateTime @default(now())
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  session     Session  @relation(fields: [sessionId], references: [session], onDelete: Cascade)
}

enum PickType {
  BASIC
  EDITOR
}

model Pick {
  id       Int      @id @default(autoincrement())
  mediaId  Int
  active   Boolean  @default(false)
  type     PickType @default(EDITOR)
  category String
  display  String
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Episode {
  id       Int      @id @default(autoincrement())
  seasonId Int
  episode  Int
  backdrop String?
  overview String?
  name     String?
  showId   Int
  videoId  Int      @unique
  created  DateTime @default(now())
  updated  DateTime @updatedAt
  media    Media    @relation(fields: [showId], references: [id], onDelete: Cascade)
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  View     View[]

  Watched Watched[]
  @@unique(fields: [seasonId, episode, showId], name: "episodeId")
}

model Folder {
  id       Int    @id @default(autoincrement())
  location String @unique
  showId   Int    @unique
  media    Media  @relation(fields: [showId], references: [id], onDelete: Cascade)
}

model Frame {
  id       Int      @id @default(autoincrement())
  cypher   String   @unique
  position Int
  userId   String
  accessed Int      @default(0)
  auth     String
  created  DateTime @default(now())
  updated  DateTime @updatedAt
  view     View     @relation(fields: [auth], references: [auth], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ListItem {
  id      Int      @id @default(autoincrement())
  mediaId Int
  userId  String
  created DateTime @default(now())
  updated DateTime @updatedAt
  media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Rating {
  id      Int    @id @default(autoincrement())
  rate    Int
  mediaId Int
  userId  String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model PlaylistVideo {
  id         Int      @id @default(autoincrement())
  videoId    Int
  playlistId String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  playlist   Playlist @relation(fields: [playlistId], references: [identifier], onDelete: Cascade)
  views      View[]
}

enum Generator {
  FRAMES
  USER
}

model Playlist {
  id             Int             @id @default(autoincrement())
  userId         String
  name           String
  overview       String?
  generator      Generator       @default(FRAMES)
  identifier     String          @unique
  isPublic       Boolean         @default(false)
  user           User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  playlistVideos PlaylistVideo[]
  sharedWith     SharedWith[]
  created        DateTime        @default(now())
}

model SharedWith {
  id         Int      @id @default(autoincrement())
  email      String
  playlistId String
  user       User     @relation(fields: [email], references: [email], onDelete: Cascade)
  playlist   Playlist @relation(fields: [playlistId], references: [identifier], onDelete: Cascade)
  created    DateTime @default(now())
}

model Suggestion {
  id      Int      @id @default(autoincrement())
  times   Int
  mediaId Int
  userId  String
  seen    Boolean  @default(false)
  created DateTime @default(now())
  updated DateTime @updatedAt
  media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Notification {
  id         Int      @id @default(autoincrement())
  opened     Boolean  @default(false)
  message    String
  title      String
  image      String
  url        String
  senderId   String
  receiverId String
  created    DateTime @default(now())
  updated    DateTime @updatedAt
  sender     User     @relation("sender", fields: [senderId], references: [userId], onDelete: Cascade)
  receiver   User     @relation("receiver", fields: [receiverId], references: [userId], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  GUEST
  OAUTH
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  password            String
  userId              String           @unique
  role                Role             @default(USER)
  inform              Boolean          @default(true)
  autoplay            Boolean          @default(true)
  confirmedEmail      Boolean          @default(false)
  confirmToken        String?
  defaultLang         String           @default("none")
  notificationChannel String           @default("global")
  incognito           Boolean          @default(false)
  revoked             Boolean          @default(false)
  auths               Auth[]
  frames              Frame[]
  lists               ListItem[]
  ratings             Rating[]
  playlist            Playlist[]
  suggestions         Suggestion[]
  identifiers         UserIdentifier[]
  views               View[]
  downloads           Download[]
  watched             Watched[]
  notifications       Notification[]   @relation("receiver")
  messages            Notification[]   @relation("sender")
  session             Session[]
  sharedWith          SharedWith[]
  seenMedia           SeenMedia[]
}

model Video {
  id             Int             @id @default(autoincrement())
  location       String          @unique
  english        String?
  french         String?
  german         String?
  mediaId        Int
  media          Media           @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  episode        Episode?
  views          View[]
  playlistVideos PlaylistVideo[]
  watched        Watched[]
}

model Room {
  id      Int    @id @default(autoincrement())
  roomKey String @unique
  auth    String
  view    View   @relation(fields: [auth], references: [auth], onDelete: Cascade)
}

model Download {
  id       Int      @id @default(autoincrement())
  location String   @unique
  userId   String
  auth     String
  view     View     @relation(fields: [auth], references: [auth], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  created  DateTime @default(now())
}

model View {
  id         Int            @id @default(autoincrement())
  auth       String         @unique
  userId     String
  videoId    Int
  episodeId  Int?
  playlistId Int?
  inform     Boolean        @default(true)
  created    DateTime       @default(now())
  updated    DateTime       @updatedAt
  playlist   PlaylistVideo? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  episode    Episode?       @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  video      Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  frame      Frame[]
  room       Room[]
  auths      Auth[]
  downloads  Download[]
}

model Watched {
  id        Int      @id @default(autoincrement())
  userId    String
  videoId   Int
  position  Int
  mediaId   Int
  episodeId Int?
  times     Int      @default(0)
  created   DateTime @default(now())
  updated   DateTime
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, videoId], name: "seenByUser")
}

model SeenMedia {
  id      Int      @id @default(autoincrement())
  userId  String
  mediaId Int
  times   Int
  media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  created DateTime @default(now())
  updated DateTime

  @@unique(fields: [mediaId, userId], name: "seenByUser")
}

enum CastType {
  ACTOR
  DIRECTOR
  WRITER
  PRODUCER
}

model CastCrew {
  id        Int      @id @default(autoincrement())
  tmdbId    Int
  name      String
  job       String?
  character String?
  type      CastType
  mediaId   Int
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

enum MediaType {
  MOVIE
  SHOW
}

model Media {
  id           Int          @id @default(autoincrement())
  urlKey       String       @unique
  name         String
  tmdbId       Int
  poster       String       @db.VarChar(250)
  backdrop     String       @db.VarChar(250)
  background   String       @default("rgba(1, 16, 28, .5)")
  genre        String
  release      DateTime?
  runtime      String
  vote_average Float?
  overview     String       @db.Text
  rating       String?
  logo         String?      @db.VarChar(250)
  trailer      String
  collection   Json?
  type         MediaType    @default(MOVIE)
  production   Json
  created      DateTime
  updated      DateTime
  editors      Pick[]
  episodes     Episode[]
  folder       Folder?
  lists        ListItem[]
  ratings      Rating[]
  suggestions  Suggestion[]
  videos       Video[]
  watched      Watched[]
  castCrews    CastCrew[]

  SeenMedia SeenMedia[]
  @@unique([tmdbId, type])
}
